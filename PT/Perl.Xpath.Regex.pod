=pod

=encoding utf8

=head1 Extração de dados perl com xpath e regex. Exportado em ODF.

Este artigo tem como objetivo proporcionar um exemplo prático que envolva:

    - Utilização de Crawlers para automatizar a navegação em sites.
    - Xpath para determinar onde estão os dados que procuramos dentro de uma página web.
    - Expressões regulares para re-formatar strings de conteúdo de acordo com o que precisamos.
    - Exportar dados do site em arquivo formato ODF ( openoffice spreadsheets ).

Para começar será escolhido um site como ponto de partida. Acesse a url escolhida para nosso artigo:

http://www.portaltransparencia.gov.br/despesasdiarias/resultado?consulta=rapida&periodoInicio=01%2F01%2F2011&periodoFim=31%2F01%2F2011&fase=EMP&codigoOS=51000&codigoFavorecido=

Obs: para obter esta url, acessei o site http://www.portaltransparencia.gov.br/despesasdiarias e selecionei o período de 01/01/2011 a 31/01/2011, Empenho, Ministério do esporte > consultar.

[% printscreen da url acima.. ressaltando o resultado da consulta. %]

Esta é uma página do portal da transparência. O que vamos fazer agora é analisar alguns pontos importantes de uma página:

    - paginação
    - formatação dos dados, valores, strings, etc.
    - layout da página

Como podemos perceber, nossa página tem paginação, e tem os dados formatados em uma table. Com esta informação já é possível perceber que teremos que acessar cada página e ler os dados que estão dentro da tabela. 

=head2 Obtendo os dados de uma página

Para acessar estes dados utilizarei XPath, que é uma sintaxe utilizada para navegar entre atributos e elementos em um documento xml. 

XPath está presente e é utilizado nas mais diversas linguagens de programação. Sua sintaxe é similar a: "//html/body/div/span" que retornaria o valor do texto que está dentro do span.

Exemplos de notação XPath:

    - //td[1] : retorna o primeiro <td>
    - //td[position()=1] : retorna o primeiro <td>
    - //table[@class='tabelao'] : retorna a table com class = 'tabelao'
    - //table/td[1] : retorna o primeiro td de uma <table>
    - /body/html//table/td[1] : retorna o primero td de uma tabela dentro do <html>

=begin pod:xhtml

<p align="center"><img src="img2.png"/></p>

=end pod:xhtml


Agora que entendemos o básico sobre XPath, vamos continuar e aplicar este aprendizado no site que escolhemos anteriormente.

O objetivo vai ser carregar os dados da página dentro de uma estrutura de dados criada especificamente para este site.

Veja a ilustração do que deve ser feito conforme a imagem:

=begin pod:xhtml

<p align="center"><img src="img1.png"/></p>

=end pod:xhtml

=head2 Analisando texto com regex

Depois que obtivermos os dados, os dados serão parseados e será feita uma re-formatação em alguns dos dados obtidos. O objetivo desta reformatação é adaptar os dados obtidos aos formatos necessários por nós. Para isto vamos utilizar Expressões regulares com o objetivo de analisar todo o conteúdo obtido e transformá-lo de acordo com o que precisamos.

Obs. isto pode ser feito já na hora da leitura dos dados.

Veja um exemplo de regex:

=begin pod:xhtml

<p align="center"><img src="img3.png"/></p>

=end pod:xhtml

Compilei uma tabela de regex simples com os itens que mais utilizo quando trabalho com regex:

=begin pod:xhtml

<p align="center"><img src="img4.png"/></p>

=end pod:xhtml

=head2 Navegação e web crawler com perl

Normalmente as 2 opções de navegação via perl mais comuns são:

    - WWW::Mechanize (será utilizado neste exemplo.)
    - LWP

E agora finalmente vamos aplicar tudo isto no código e gerar um arquivo de saída spreadsheet ods (open office)



#!/usr/bin/perl 

use strict;
use warnings;
use WWW::Mechanize;
use HTML::TreeBuilder::XPath;
use HTML::LinkExtor;
use OpenOffice::OODoc;

my $mech = WWW::Mechanize->new();
$mech->agent_alias( 'Windows IE 6' );
my $url = 'http://www.portaltransparencia.gov.br/despesasdiarias/resultado?consulta=rapida&periodoInicio=01%2F01%2F2011&periodoFim=31%2F01%2F2011&fase=EMP&codigoOS=51000&codigoFavorecido=';
my @items = ();
my $url_visited = {};
scan_page( $url );


@items = reformata_dados_com_regex( \@items );
exportar_e_salvar_odf( \@items );

use Data::Dumper;
print "Resultados","\n", Dumper @items, "\n";
print "Para ver o arquivo em formato openoffice, abra o arquivo criado: 'portal_transparencia.ods' e veja a tabela de nome 'TABELA DADOS' ","\n";

sub scan_page {
  my ( $link ) = @_;
  $mech->get( $link );
  my @links_paginacao = search_links_paginacao( $mech->res->content, '//p[@id="paginacao"]' );

  foreach my $url ( @links_paginacao ) {
    if ( ! $url_visited->{ $url } ) {
      print "Acessando url: ", $url, "\n";
      $mech->get( $url );
      my $pagina_html = $mech->res->content;
      parse_data( $pagina_html );
      $url_visited->{ $url } = 'visited';
      scan_page( $url );

      } else {
#         print "url visitada","\n";
      }
    }

}

sub search_links_paginacao {
    my ( $html, $pagination_xpath ) = @_;
    
    my $tree= HTML::TreeBuilder::XPath->new;
    $tree->parse( $html );
    my $pagination_div = $tree->findnodes( $pagination_xpath );
    $pagination_div = $pagination_div->[0]->as_HTML;


    my $url_list  = HTML::LinkExtor->new();
    $url_list->parse( $pagination_div );

    my @links= ();
    foreach my $item ( @{ [ $url_list->links ] } ) {
      push( @links, 'http://www.portaltransparencia.gov.br' . @$item[2]);
    }
    $tree->delete;
    return @links;


    }

sub parse_data {
    my ( $html ) = @_;

    my $tree= HTML::TreeBuilder::XPath->new;
    $tree->parse( $html );

    my $tabela = $tree->findnodes( '//table[@class="tabela"]' );

    my $tabela_com_dados_html =  $tabela->[0]->as_HTML; #

    my $table_rows = $tree->findnodes( '//table[@class="tabela"]/tr' );
    my $count = 0;
    foreach my $row ( $table_rows->get_nodelist ) {
        if ( $count > 1 ){ 
        my $tree_tr = HTML::TreeBuilder::XPath->new;
        $tree_tr->parse( $row->as_HTML );

        my $row_data = {
            data                => $tree_tr->findvalue( '//td[1]' ),
            fase                => $tree_tr->findvalue( '//td[2]' ),
            documento           => $tree_tr->findvalue( '//td[3]' ),
            especie             => $tree_tr->findvalue( '//td[4]' ),
            orgao_superior      => $tree_tr->findvalue( '//td[5]' ),
            entidade_vinculada  => $tree_tr->findvalue( '//td[6]' ),
            unidade_gestora     => $tree_tr->findvalue( '//td[7]' ),
            elemento_despesa    => $tree_tr->findvalue( '//td[8]' ),
            favorecido          => $tree_tr->findvalue( '//td[9]' ),
            valor               => $tree_tr->findvalue( '//td[10]' ),
        };
        push( @items, $row_data );
        $tree_tr->delete;
        }
        $count++;
    }


    $tree->delete;
    }

sub reformata_dados_com_regex {
    my ( $items ) = @_;
    for ( my $i = 0; $i < scalar( @$items ) ; $i++ ) {
        @$items[$i]->{ data } = join ( '/', $1, $2, $3 ) if ( @$items[$i]->{ data }  =~ m/^(\d{4})-(\d{2})-(\d{2})/ ) ; #4dígitos traço 2 dígitos traço 2 dígitos
        @$items[$i]->{ valor } = join ( '.', $1, $2 ) if ( @$items[$i]->{ valor }  =~ m/(\d{1,})\.(\d{2})(\d{2})$/ ) ; #ao menos 1 dígito seguido de . e 2 dígitos de precisão.
    }
    return @$items;
}


sub exportar_e_salvar_odf {
    my ( $items ) = @_;
    my $document = odfDocument(file => 'portal_transparencia.ods', create => 'spreadsheet');
    my $table  = $document->appendTable("TABELA DADOS", 1000,50);
    my $line = 0;
    $document->updateCell( $table, $line, 1, "Data" );
    $document->updateCell( $table, $line, 2, "Fase" );
    $document->updateCell( $table, $line, 3, "Documento" );
    $document->updateCell( $table, $line, 4, "Espécie" );
    $document->updateCell( $table, $line, 5, "Órgão Superior" );
    $document->updateCell( $table, $line, 6, "Entidade Vinculada" );
    $document->updateCell( $table, $line, 7, "Unidade Gestora" );
    $document->updateCell( $table, $line, 8, "Elemento Despesa" );
    $document->updateCell( $table, $line, 9, "Favorecido" );
    $document->updateCell( $table, $line, 10, "Valor" );

    foreach my $item ( @$items ) {
        $line++;
        $document->updateCell( $table, $line, 1, $item->{ data } );
        $document->updateCell( $table, $line, 2, $item->{ fase } );
        $document->updateCell( $table, $line, 3, $item->{ documento } );
        $document->updateCell( $table, $line, 4, $item->{ especie } );
        $document->updateCell( $table, $line, 5, $item->{ orgao_superior } );
        $document->updateCell( $table, $line, 6, $item->{ entidade_vinculada } );
        $document->updateCell( $table, $line, 7, $item->{ unidade_gestora } );
        $document->updateCell( $table, $line, 8, $item->{ elemento_despesa } );
        $document->updateCell( $table, $line, 9, $item->{ favorecido } );
        $document->updateCell( $table, $line, 10, $item->{ valor } );
    }
    $document->save;
}

=cut

